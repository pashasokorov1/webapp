import json
import os
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters
)
from config import BOT_TOKEN
from utils.storage import load_data, save_data
from utils.calculations import calculate_fuel
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackQueryHandler
from telegram import  WebAppInfo
# –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º —Å –¥–∞–Ω–Ω—ã–º–∏
CARS_FILE = "data/cars.json"
USERS_FILE = "data/users.json"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    WAITING_FOR_CAR_DATA,
    WAITING_FOR_CAR,
    WAITING_FOR_START_ODOMETER,
    WAITING_FOR_KM,
    WAITING_FOR_TRIP_DATA,
    WAITING_FOR_IDLE,
    WAITING_FOR_FUEL_START,
    WAITING_FOR_REFUEL
) = range(8)

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def is_valid_number(value):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º (—Ü–µ–ª—ã–º –∏–ª–∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º)."""
    try:
        return float(value) >= 0
    except ValueError:
        return False

def load_data(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    if not os.path.exists(file_path):
        return {}
    with open(file_path, "r", encoding="utf-8") as file:
        return json.load(file)

def save_data(file_path, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª."""
    with open(file_path, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4, ensure_ascii=False)

# --- –§—É–Ω–∫—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É", callback_data="add_car")],
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω", callback_data="list_car")],
        [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ—Ä–º—ã", callback_data="view_car_menu")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="add_trip_menu")],
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ WebApp", web_app=WebAppInfo(url="https://pashasokorov1.github.io/fffggg/"))],
    ])
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if update.message:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    elif update.callback_query:
        await update.callback_query.edit_message_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)



            
async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()

    if query.data == "add_car":
        # –û—á–∏—â–∞–µ–º user_data –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
        if "car_number" not in context.user_data:
            context.user_data.clear()

        context.user_data["waiting_for_car"] = True
        await query.edit_message_text("üöó –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<–Ω–æ–º–µ—Ä> <–≥–æ—Ä–æ–¥> <—Ç—Ä–∞—Å—Å–∞> <—Ä–∞–π–æ–Ω> <–ø—Ä–æ—Å—Ç–æ–π>")
        return WAITING_FOR_CAR_DATA
    elif query.data == "list_car":
        await list_car_inline(update, context)
    elif query.data == "view_car_menu":
        await handle_view_car_menu(update, context)
    elif query.data == "add_trip_menu":
        await handle_add_trip_menu(update, context)
    elif query.data == "main_menu":
        await start(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

async def list_car_inline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—à–∏–Ω —á–µ—Ä–µ–∑ Inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    cars = load_data(CARS_FILE)

    if not cars:
        await query.edit_message_text("–°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –º–∞—à–∏–Ω—É —Å–Ω–∞—á–∞–ª–∞.")
        return

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(car_number, callback_data=f"view_car_{car_number}")]
        for car_number in cars.keys()
    ] + [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]])

    await query.edit_message_text("–°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω:", reply_markup=keyboard)

async def handle_view_car_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ—Ä–º."""
    query = update.callback_query
    cars = load_data(CARS_FILE)

    if not cars:
        await query.edit_message_text("–°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –º–∞—à–∏–Ω—É —Å–Ω–∞—á–∞–ª–∞.")
        return

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(car_number, callback_data=f"view_car_{car_number}")]
        for car_number in cars.keys()
    ] + [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]])

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ—Ä–º:", reply_markup=keyboard)



async def view_car_inline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ—Ä–º—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ—Ä–º—ã' –∏ '–£–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—É'."""
    query = update.callback_query
    car_number = query.data.replace("view_car_", "")
    cars = load_data(CARS_FILE)

    if car_number not in cars:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    norms = cars[car_number]

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úè –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ—Ä–º—ã", callback_data=f"edit_norms_{car_number}")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—É", callback_data=f"confirm_delete_{car_number}")],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="view_car_menu")]
    ])

    await query.edit_message_text(
        f"üöó **–ù–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è {car_number}:**\n"
        f"üèô –ì–æ—Ä–æ–¥: {norms['city']} –ª/100 –∫–º\n"
    f"üõ£ –¢—Ä–∞—Å—Å–∞: {norms['highway']} –ª/100 –∫–º\n"
    f"üåÑ –†–∞–π–æ–Ω: {norms['district']} –ª/100 –∫–º\n"
    f"‚è≥ –ü—Ä–æ—Å—Ç–æ–π: {norms['idle']} –ª/—á–∞—Å",
        reply_markup=keyboard
    )

async def edit_norms_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—ã–µ –Ω–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞."""
    query = update.callback_query
    car_number = query.data.replace("edit_norms_", "")

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã –≤ user_data
    context.user_data["edit_car_number"] = car_number

    await query.edit_message_text(
        f"‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è **{car_number}** –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"`<–≥–æ—Ä–æ–¥> <—Ç—Ä–∞—Å—Å–∞> <—Ä–∞–π–æ–Ω> <–ø—Ä–æ—Å—Ç–æ–π>`\n\n"
        f"üìå –ü—Ä–∏–º–µ—Ä: `8.500 6.200 7.100 1.000`"
    )

async def handle_edit_norms_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤—ã—Ö –Ω–æ—Ä–º –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã."""

    if "edit_car_number" not in context.user_data:
        return  # ‚ö† –ù–ï –í–´–î–ê–ï–ú –û–®–ò–ë–ö–£, –ü–†–û–°–¢–û –ù–ï –î–ï–õ–ê–ï–ú –ù–ò–ß–ï–ì–û

    car_number = context.user_data["edit_car_number"]
    text = update.message.text.strip()
    args = text.split()

    if len(args) != 4:
        await update.message.reply_text(
            "üö® –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`<–≥–æ—Ä–æ–¥> <—Ç—Ä–∞—Å—Å–∞> <—Ä–∞–π–æ–Ω> <–ø—Ä–æ—Å—Ç–æ–π>`\n"
            "üìå –ü—Ä–∏–º–µ—Ä: `8.500 6.200 7.100 1.000`"
        )
        return

    city_norm, highway_norm, district_norm, idle_norm = args

    if not all(is_valid_number(x) for x in [city_norm, highway_norm, district_norm, idle_norm]):
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞: –ù–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.")
        return

    cars = load_data(CARS_FILE)

    if car_number not in cars:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    cars[car_number]["city"] = city_norm.strip()
    cars[car_number]["highway"] = highway_norm.strip()
    cars[car_number]["district"] = district_norm.strip()
    cars[car_number]["idle"] = idle_norm.strip()
    save_data(CARS_FILE, cars)

# ‚úÖ –û—á–∏—â–∞–µ–º `edit_car_number` –∏–∑ user_data, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º –≤ –±—É–¥—É—â–µ–º
    del context.user_data["edit_car_number"]

    await update.message.reply_text(
        f"‚úÖ **–ù–æ—Ä–º—ã –¥–ª—è {car_number} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**\n"
        f"üèô –ì–æ—Ä–æ–¥: {cars[car_number]['city']} –ª/100 –∫–º\n"
        f"üõ£ –¢—Ä–∞—Å—Å–∞: {cars[car_number]['highway']} –ª/100 –∫–º\n"
        f"üåÑ –†–∞–π–æ–Ω: {cars[car_number]['district']} –ª/100 –∫–º\n"
        f"‚è≥ –ü—Ä–æ—Å—Ç–æ–π: {cars[car_number]['idle']} –ª/—á–∞—Å",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üöó –î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data=f"add_trip_{car_number}")],
            [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ –º–∞—à–∏–Ω–µ", callback_data=f"view_car_{car_number}")],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

    return ConversationHandler.END


async def confirm_delete_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã."""
    query = update.callback_query
    car_number = query.data.replace("confirm_delete_", "")

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_car_{car_number}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_car_{car_number}")]
    ])

    await query.edit_message_text(
        f"‚ö† –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—É **{car_number}**?",
        reply_markup=keyboard
    )


async def delete_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–∞—à–∏–Ω—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω."""
    query = update.callback_query
    car_number = query.data.replace("delete_car_", "")

    cars = load_data(CARS_FILE)
    if car_number not in cars:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    del cars[car_number]  # –£–¥–∞–ª—è–µ–º –º–∞—à–∏–Ω—É
    save_data(CARS_FILE, cars)

    await query.edit_message_text(
        f"‚úÖ –ú–∞—à–∏–Ω–∞ **{car_number}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="view_car_menu")]])
    )

    
async def handle_add_trip_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏."""
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    cars = load_data(CARS_FILE)
    if not cars:  # –ï—Å–ª–∏ –Ω–µ—Ç –º–∞—à–∏–Ω
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –º–∞—à–∏–Ω—É —Å–Ω–∞—á–∞–ª–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –º–∞—à–∏–Ω
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(car_number, callback_data=f"add_trip_{car_number}")]
        for car_number in cars.keys()
    ] + [[InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="main_menu")]])

    await query.edit_message_text("üöó –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏:", reply_markup=keyboard)

async def handle_add_car_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë."""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ –¥—Ä—É–≥–∞—è –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏)
    if "waiting_for_car" not in context.user_data:
        return
    
    text = update.message.text.strip()
    args = text.split()

    if len(args) != 5:
        await update.message.reply_text(
            "üö® –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<–Ω–æ–º–µ—Ä> <–≥–æ—Ä–æ–¥> <—Ç—Ä–∞—Å—Å–∞> <—Ä–∞–π–æ–Ω> <–ø—Ä–æ—Å—Ç–æ–π>\n"
            "üìå –ü—Ä–∏–º–µ—Ä: `–ê123–í–ú 8.5 6.2 7.1 1.0`"
        )
        return WAITING_FOR_CAR_DATA

    car_number, city_norm, highway_norm, district_norm, idle_norm = args

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —á–∏—Å–ª–∞
    if not all(is_valid_number(x) for x in [city_norm, highway_norm, district_norm, idle_norm]):
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞: –Ω–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.")
        return WAITING_FOR_CAR_DATA

    cars = load_data(CARS_FILE)

    if car_number in cars:
        await update.message.reply_text(
            f"‚ö† –ú–∞—à–∏–Ω–∞ —Å –Ω–æ–º–µ—Ä–æ–º {car_number} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        )
        return ConversationHandler.END

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤ —á–∏—Å–ª–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    cars[car_number] = {
    "city": city_norm.strip(),    # –•—Ä–∞–Ω–∏–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    "highway": highway_norm.strip(),
    "district": district_norm.strip(),
    "idle": idle_norm.strip(),
}

    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—à–∏–Ω—É –≤ –±–∞–∑—É
    cars[car_number] = {
        "city": str(city_norm),
        "highway": str(highway_norm),
        "district": str(district_norm),
        "idle": str(idle_norm),
    }
    save_data(CARS_FILE, cars)

    # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–∞—Å—á—ë—Ç–∞–º–∏
    await update.message.reply_text(
        f"‚úÖ **–ú–∞—à–∏–Ω–∞ {car_number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n"
        f"üìä **–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞:**\n"
        f" - üèô –ì–æ—Ä–æ–¥: {city_norm} –ª/100 –∫–º\n"
        f" - üõ£ –¢—Ä–∞—Å—Å–∞: {highway_norm} –ª/100 –∫–º\n"
        f" - üåÑ –†–∞–π–æ–Ω: {district_norm} –ª/100 –∫–º\n"
        f" - ‚è≥ –ü—Ä–æ—Å—Ç–æ–π: {idle_norm} –ª/—á–∞—Å"
        f"\nüî¢ **–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ä–∞—Å—Ö–æ–¥:**\n"
        f" - (–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å –≤ –∫–º) √ó (–ù–æ—Ä–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ –Ω–∞ 100 –∫–º) √∑ 100\n"
        f" - (–ß–∞—Å—ã –ø—Ä–æ—Å—Ç–æ—è) √ó (–ù–æ—Ä–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ –≤ —á–∞—Å)\n"
        f"\nüîô –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/list_car` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –º–∞—à–∏–Ω.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    )

    return ConversationHandler.END



async def add_trip_inline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏."""
    query = update.callback_query
    await query.answer()

    car_number = query.data.replace("add_trip_", "")

    cars = load_data(CARS_FILE)

    if car_number not in cars:
        await query.edit_message_text("üö® –û—à–∏–±–∫–∞: –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    # **–°–æ—Ö—Ä–∞–Ω—è–µ–º `car_number` –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ**
    context.user_data["car_number"] = car_number  # ‚úÖ –¢–µ–ø–µ—Ä—å `car_number` –Ω–µ —Ç–µ—Ä—è–µ—Ç—Å—è

    await query.edit_message_text(
        f"üöó **–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ –¥–ª—è {car_number}**.\n\n"
        "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø–∏–¥–æ–º–µ—Ç—Ä–∞ (–∫–º):"
    )

    return WAITING_FOR_START_ODOMETER

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏ ---
async def add_trip_start_odometer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏–¥–æ–º–µ—Ç—Ä –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–µ—Ö–∞–ª–∏."""

    if "car_number" not in context.user_data:
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞: –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    if not update.message or not update.message.text:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return WAITING_FOR_START_ODOMETER

    start_odometer = update.message.text.strip()
    
    if not is_valid_number(start_odometer):
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return WAITING_FOR_START_ODOMETER

    context.user_data["start_odometer"] = float(start_odometer)
    
    await update.message.reply_text("üìè –°–∫–æ–ª—å–∫–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –≤—ã –ø—Ä–æ–µ—Ö–∞–ª–∏ –∑–∞ –¥–µ–Ω—å?")
    
    return WAITING_FOR_KM

async def add_trip_km(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∏–ª–æ–º–µ—Ç—Ä—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ."""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –ù–ï –∂–¥–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—à–∏–Ω–µ
    if "waiting_for_car" in context.user_data:
        return

    km = update.message.text.strip()
    
    if not is_valid_number(km):
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤.")
        return WAITING_FOR_KM

    km = update.message.text.strip()
    
    if not is_valid_number(km):
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤.")
        return WAITING_FOR_KM

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—à–∏–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if "car_number" not in context.user_data:
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞: –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å

    context.user_data["km"] = float(km)

    await update.message.reply_text(
        "üìä –£–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –∫–º –ø—Ä–æ–µ—Ö–∞–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `<–≥–æ—Ä–æ–¥> <—Ç—Ä–∞—Å—Å–∞> <—Ä–∞–π–æ–Ω>`."
    )
    return WAITING_FOR_TRIP_DATA

async def add_trip_distribution(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π."""
    
    if "car_number" not in context.user_data:
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞: –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å

    trip_data = update.message.text.split()
    if len(trip_data) != 3 or not all(is_valid_number(x) for x in trip_data):
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `<–≥–æ—Ä–æ–¥> <—Ç—Ä–∞—Å—Å–∞> <—Ä–∞–π–æ–Ω>` (–≤ –∫–º)."
        )
        return WAITING_FOR_TRIP_DATA

    city, highway, district = map(float, trip_data)
    
    if abs(city + highway + district - context.user_data["km"]) > 0.01:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –°—É–º–º–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –¥–æ–ª–∂–Ω–∞ —Ä–∞–≤–Ω—è—Ç—å—Å—è –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö."
        )
        return WAITING_FOR_TRIP_DATA

    context.user_data.update({"city": city, "highway": highway, "district": district})
    
    await update.message.reply_text("‚è≥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ—è:")
    return WAITING_FOR_IDLE

async def add_trip_idle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–æ–ø–ª–∏–≤–æ –Ω–∞ –Ω–∞—á–∞–ª–æ."""
    idle = update.message.text
    if not is_valid_number(idle):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤.")
        return WAITING_FOR_IDLE

    context.user_data["idle"] = float(idle)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞ –≤ –±–∞–∫–µ –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è.")
    return WAITING_FOR_FUEL_START

async def add_trip_fuel_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ø–ª–∏–≤–æ –Ω–∞ –Ω–∞—á–∞–ª–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∑–∞–ø—Ä–∞–≤–∫—É."""
    fuel_start = update.message.text
    if not is_valid_number(fuel_start):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞.")
        return WAITING_FOR_FUEL_START

    context.user_data["fuel_start"] = float(fuel_start)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞.")
    return WAITING_FOR_REFUEL

async def add_trip_refuel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø—Ä–∞–≤–∫—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö."""
    refuel = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞
    if not is_valid_number(refuel):
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞.")
        return WAITING_FOR_REFUEL

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    context.user_data["refuel"] = refuel

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –µ—Å—Ç—å –≤ user_data
    required_keys = ["car_number", "start_odometer", "km", "city", "highway", "district", "idle", "fuel_start", "refuel"]
    missing_keys = [key for key in required_keys if key not in context.user_data]

    if missing_keys:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ ({', '.join(missing_keys)}). –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ user_data
    car_number = context.user_data["car_number"]
    start_odometer = context.user_data["start_odometer"]
    km = context.user_data["km"]
    city = context.user_data["city"]
    highway = context.user_data["highway"]
    district = context.user_data["district"]
    idle = context.user_data["idle"]
    fuel_start = context.user_data["fuel_start"]
    refuel = context.user_data["refuel"]

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—à–∏–Ω–∞ –≤ –±–∞–∑–µ
    cars = load_data(CARS_FILE)
    if car_number not in cars:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.")
        return ConversationHandler.END

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞
    norms = cars[car_number]
    if not all(key in norms for key in ["city", "highway", "district", "idle"]):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è –º–∞—à–∏–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")
        return ConversationHandler.END

    # ‚úÖ –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞
    result = calculate_fuel(city, highway, district, idle, norms)
    total_fuel = result["total_fuel"]
    fuel_end = float(fuel_start) + float(refuel) - float(total_fuel)
    end_odometer = float(start_odometer) + float(km)

    # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = load_data(USERS_FILE)
    user_id = str(update.effective_user.id)

    # ‚úÖ –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ –ø–æ–µ–∑–¥–∫–µ
    if user_id not in users:
        users[user_id] = {"trips": []}

    users[user_id]["trips"].append({
        "car": car_number,
        "start_odometer": start_odometer,
        "end_odometer": end_odometer,
        "km": km,
        "city": city,
        "highway": highway,
        "district": district,
        "idle": idle,
        "fuel_start": fuel_start,
        "refuel": refuel,
        "fuel_end": fuel_end,
        "total_fuel": total_fuel,
    })
    save_data(USERS_FILE, users)

    # ‚úÖ –û—á–∏—â–∞–µ–º user_data, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ª–∏—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    context.user_data.clear()

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    await update.message.reply_text(
        f"‚úÖ **–†–∞—Å—á—ë—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!**\n"
        f"üìç **–°–ø–∏–¥–æ–º–µ—Ç—Ä:** {start_odometer} –∫–º ‚Üí {end_odometer} –∫–º\n"
        f"üìä **–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã:**\n"
        f"üèô –ì–æ—Ä–æ–¥: {city} –∫–º √ó {norms['city']} –ª/100 –∫–º = {result['city_fuel']} –ª\n"
        f"üõ£ –¢—Ä–∞—Å—Å–∞: {highway} –∫–º √ó {norms['highway']} –ª/100 –∫–º = {result['highway_fuel']} –ª\n"
        f"üåÑ –†–∞–π–æ–Ω: {district} –∫–º √ó {norms['district']} –ª/100 –∫–º = {result['district_fuel']} –ª\n"
        f"‚è≥ –ü—Ä–æ—Å—Ç–æ–π: {idle} —á √ó {norms['idle']} –ª/—á = {result['idle_fuel']} –ª\n"
        f"\nüí° **–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥:**\n"
        f"üîπ {result['city_fuel']} + {result['highway_fuel']} + {result['district_fuel']} + {result['idle_fuel']} = {result['total_fuel']} –ª\n\n"
        f"‚õΩ **–ë–∞–ª–∞–Ω—Å —Ç–æ–ø–ª–∏–≤–∞:**\n"
        f"üîπ –ù–∞—á–∞–ª–æ –¥–Ω—è: {fuel_start} –ª\n"
        f"üîπ –ó–∞–ø—Ä–∞–≤–ª–µ–Ω–æ: {refuel} –ª\n"
        f"üîπ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_fuel} –ª\n"
        f"üîπ –û—Å—Ç–∞—Ç–æ–∫: {fuel_start} + {refuel} - {total_fuel} = {fuel_end} –ª",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            [InlineKeyboardButton("üöó –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –ø–æ–µ–∑–¥–∫—É", callback_data=f"add_trip_{car_number}")]
        ])
    )
    
    return ConversationHandler.END

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–±–µ–∑ main_menu)
    application.add_handler(CallbackQueryHandler(handle_menu_callback, pattern="^(add_car|list_car|view_car_menu|add_trip_menu|delete_car_menu)$"))

    # –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(CallbackQueryHandler(start, pattern="^main_menu$"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    application.add_handler(CallbackQueryHandler(view_car_inline, pattern="^view_car_"))
    application.add_handler(CallbackQueryHandler(handle_add_trip_menu, pattern="^add_trip_menu$"))
    application.add_handler(CallbackQueryHandler(list_car_inline, pattern="^list_car$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_add_car_data), group=1)
    application.add_handler(CallbackQueryHandler(confirm_delete_car, pattern="^confirm_delete_"))
    application.add_handler(CallbackQueryHandler(delete_car, pattern="^delete_car_"))
    application.add_handler(CallbackQueryHandler(edit_norms_request, pattern="^edit_norms_"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_norms_input), group=2)

    car_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_menu_callback, pattern="^add_car$")],
        states={
            WAITING_FOR_CAR_DATA: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_add_car_data)],
        },
        fallbacks=[CallbackQueryHandler(start, pattern="^main_menu$")],  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        per_user=True,
        per_chat=False,
    )

    application.add_handler(car_handler)

    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
    trip_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_trip_inline, pattern="^add_trip_")],
        states={
            WAITING_FOR_START_ODOMETER: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_trip_start_odometer)],
            WAITING_FOR_KM: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_trip_km)],
            WAITING_FOR_TRIP_DATA: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_trip_distribution)],
            WAITING_FOR_IDLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_trip_idle)],
            WAITING_FOR_FUEL_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_trip_fuel_start)],
            WAITING_FOR_REFUEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_trip_refuel)],
        },
        fallbacks=[CallbackQueryHandler(start, pattern="^main_menu$")],  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        per_user=True,
        per_chat=False,
    )
    application.add_handler(trip_handler)
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()